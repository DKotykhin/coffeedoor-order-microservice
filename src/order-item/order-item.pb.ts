// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: proto/order-item.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "orderItem";

export interface OrderItem {
  id: string;
  slug: string;
  categoryTitle: string;
  itemTitle: string;
  price: number;
  quantity: number;
  weight: number;
  createdAt: string;
  updatedAt: string;
  order: Id | undefined;
}

export interface OrderItemList {
  orderItemList: OrderItem[];
}

export interface CreateOrderItemRequest {
  slug: string;
  categoryTitle: string;
  itemTitle: string;
  price: number;
  quantity: number;
  weight?: number | undefined;
  order: Id | undefined;
}

export interface UpdateOrderItemRequest {
  id: string;
  price?: number | undefined;
  quantity?: number | undefined;
  weight?: number | undefined;
}

export interface Id {
  id: string;
}

export interface StatusResponse {
  status: boolean;
  message: string;
}

export const ORDER_ITEM_PACKAGE_NAME = "orderItem";

export interface OrderItemServiceClient {
  getOrderItemById(request: Id): Observable<OrderItem>;

  getOrderItemsByOrderId(request: Id): Observable<OrderItemList>;

  createOrderItem(request: CreateOrderItemRequest): Observable<OrderItem>;

  updateOrderItem(request: UpdateOrderItemRequest): Observable<OrderItem>;

  deleteOrderItem(request: Id): Observable<StatusResponse>;
}

export interface OrderItemServiceController {
  getOrderItemById(request: Id): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  getOrderItemsByOrderId(request: Id): Promise<OrderItemList> | Observable<OrderItemList> | OrderItemList;

  createOrderItem(request: CreateOrderItemRequest): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  updateOrderItem(request: UpdateOrderItemRequest): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  deleteOrderItem(request: Id): Promise<StatusResponse> | Observable<StatusResponse> | StatusResponse;
}

export function OrderItemServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getOrderItemById",
      "getOrderItemsByOrderId",
      "createOrderItem",
      "updateOrderItem",
      "deleteOrderItem",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderItemService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderItemService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_ITEM_SERVICE_NAME = "OrderItemService";
